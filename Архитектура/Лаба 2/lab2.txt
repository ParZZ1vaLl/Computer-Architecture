Завдання:

Вивести до знакової відеопам’яті архітектурі МПС у реальному режимі 
інформацію так, щоб на консолі утворився прямокутник розміром 20 знаків 
по горизонталі і 10 знаків по вертикалі. Колір надпису наданий у таблиці,
відповідно до варіанту. Кольори прямокутника і координати
верхнього лівого кута прямокутника відносно верхнього лівого кута екрану
визначені у таблиці 1 відповідно до варіантів. 

Описання коду:

IDEAL - це режим який покращує синтаксис мови і розширує його функціональні можливості. Джерело: http://citforum.ru/programming/tasm3/tasm3_3.shtml
MODEL дозволяє нам задати для програми кілька стандартних моделей сегментації. Ми можемо також використовувати її для задання мови для процедур програми. 
Джерело: http://citforum.ru/programming/tasm3/tasm3_7.shtml
STACK визначає стек певного розміру

Далі ми ініціалізуємо макрос я кий називається M_Init
Макрос - це послідовність інструкцій з ім'ям, яка може використовуватися в будь-якому місці програми
В нашому макросі іде ініціалізація регістрів DS та ES а також створення @data - це ідентифікатор, що створюються директивою model


	Регістр DS, сегмента даних, містить початкову адресу сегменту даних, у
	нашому прикладі вимагає ініціалізації і дає можливість адресувати будь яку
	змінну, об’єкт або символьний рядок, що знаходиться у сегменті даних.

	Регістр ES, додатковий регістр, може містити тимчасові значення адрес у
	різних способах адресації, потребує ініціалізації. До регістра покажчика ІР у
	звичайному режимі роботи у розробника немає доступу до цього регістру. 

DATASEG - початок сегменту даних
exCode - код завершення програми
Далі ми створюємо масив rect_line, в якому записаний текст "PLUSERS ARE THE BEST", де текст жовтого кольору а задній фон червоного.

CODESEG - початок сегменту коду
Спочатку викликаємо наш макрос.

mov dx,810 ; Початок виводу прямокутника
mov cx, 10

Далі ми створюємо цикл loopStart:

mov bx, cx
mov ax,0B800h ; 1. Сегментна адреса відеопамяті
mov es,ax ; 2. До ES ; Налаштування SI,DI и СХ для movsb 

mov di, dx; di <- Початок виводу на екран
mov si,offset rect_line
mov cx,rect_line_length ; Число байтів на пересилання
cld ; DF - вперед
 
rep movsb ; Пересилання 
mov cx,bx
add dx, 160
LOOP loopStart - тут задаємо що це саме цикл

І вихід з програми:
 
	mov ah,4ch; Завантаження числа 4ch до регістру ah
	mov al,[exCode]	; отримання коду виходу(тобто 0)
	int 21h		